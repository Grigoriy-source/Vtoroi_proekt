import requests
import random
import pandas as pd

 #Запрос данных с сайта
response = requests.get('https://api.github.com')
 #Вывод ответа в консоль
print(response.json())  # Печать JSON-ответа от GitHub API
 #JSON - текстовый формат обмена данными, который используется для передачи данных между сервером и клиентом
print("\n Код requests завершён \n")

 #Возможности библиотеки requests:
 #отправка HTTP-запросов (GET, POST, PUT, DELETE и т.д.);
 #управление заголовками запросов;
 #обработка параметров и данных формы;
 #работа с ответами, включая статус-коды и содержимое.




 #Создание DataFrame из списка словарей
data = [{'name': 'Григорий', 'age': 42}, {'name': 'Леонид', 'age': 8}]
df = pd.DataFrame(data)

print(df)
print()

 #Фильтрация данных по условию
older_than_25 = df[df['age'] > 25]
print(older_than_25)
print()

 #Группировка данных по столбцу
grouped_by_age = df.groupby('age')
print(grouped_by_age)
print()

 #Сортировка данных по столбцам
sorted_df = df.sort_values(['age'], ascending=False)
print(sorted_df)
print()

 #Агрегация данных
total_ages = df['age'].sum()
print(f"Сумма возрастов: {total_ages}")
print("\n Код pandas завершён \n")

#Основные функции Pandas:
#cоздание и работа с DataFrame — это основной объект в Pandas, который представляет собой двумерную структуру данных,
#похожую на таблицу в Excel;
#cериализация данных — возможность преобразования данных в различные форматы, такие как CSV, JSON, HTML и другие;
#манипуляция данными — возможность фильтрации, сортировки, группировки и агрегирования данных;
#анализ временных рядов — возможность работы с данными, которые изменяются со временем, такими как финансовые
#или метеорологические данные;
#визуализация данных — возможность создания графиков и диаграмм для наглядного представления данных.

